"""
1. 理解 BFS 广度优先搜索  有点像是 二叉树的 前序遍历  VLR
2. A* Search 启发式搜索  理解曼哈顿距离
    manhattan + step 从较终点近的点开始搜索
"""

import heapq

class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n = len(grid)
        if not grid or grid[0][0] == 1 or grid[-1][-1] == 1:
            return -1
        elif n <= 2:
            return n
        
        def manhattan(a, b):    # A* Search  根据 曼哈顿距离 优先 查 离终点最近的点
            return max(abs(n - 1 - a), abs(n - 1 - b))
        visible = set()     # 标记已访问过的点
        h = []
        heapq.heappush(h, (0, (0, 0, 1)))  # priority  x y  step
        while h:
            _, (x, y, step) = heapq.heappop(h)
            if (x, y) in visible:
                continue
            else:
                visible.add((x, y))

            for dx, dy in [         # BFS
                (-1, -1), (-1, 0), (-1, 1), (0, -1),
                (0, 1), (1, -1), (1, 0), (1, 1)
            ]:
                next_x = x + dx
                next_y = y + dy
                if next_x == n - 1 and next_y == n - 1:
                    return step + 1
                elif 0 <= next_x < n and 0 <= next_y < n and grid[next_x][next_y] == 0:
                    heapq.heappush(h, (step + manhattan(next_x, next_y), (next_x, next_y, step + 1)))
        return -1
